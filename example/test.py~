from simtk.openmm.app import *
from simtk.openmm import *
from simtk.unit import *
from sys import stdout
import os, time, shutil
#from desmonddmsfile import *
from desmonddmsfileBEDAM_MultiDMS1_abc import *
#from desmonddmsfileMultiDMS1 import *
from datetime import datetime
#from openmm import *
from BEDAMplugin import *

lambdaList = [0.0,0.002,0.004,0.008,0.01,0.02,0.04,0.07,0.1,0.17,0.25,0.35,0.5,0.6,0.7,0.8,0.9,1.0]
#lambdaList = [0.0]
print("Started at: " + str(time.asctime()))
start=datetime.now()
#shutil.copyfile('5dfr_opls_hct_rst1.dms','5dfr_opls_hct_rst2.dms')
binding_file = 'binding_abc_restraint_hct_18_lambda_081015.dat'
f = open(binding_file, 'w')
for lambdaId in lambdaList:
    print("lambda = %f" %(lambdaId))
    #cp_rcpt_command = "cp bcd_recpt_orig.dms bcd_recpt.dms" 
    #cp_lig_command = "cp benzene_lig_orig.dms benzene_lig.dms" 
    #os.system(cp_lig_command)
    #os.system(cp_rcpt_command)
    testDes = DesmondDMSFile('bcd_recpt.dms','benzene_lig.dms',BEDAM=True) 
    system = testDes.createSystem(nonbondedMethod=CutoffNonPeriodic,nonbondedCutoff=1.0*nanometer, OPLS = True,implicitSolvent=HCT)
    integrator = LangevinIntegratorBEDAM(300*kelvin, 1/picosecond, 0.002*picoseconds,12,lambdaId,109,154,1225.0,0.5)
    #platform = Platform.getPlatformByName('CUDA')
    platform = Platform.getPlatformByName('OpenCL')
    #context1 = Context(system,integrator,platform)
    simulation = Simulation(testDes.topology, system, integrator,platform)
    simulation.context.setPositions(testDes.positions)
    simulation.context.setVelocities(testDes.velocities)
    testDes.get_orig_force_parameters(system)
    context=simulation.context
    """
    #calculate the binding energy before MD simulation
    print "calculating binding energy"
    testDes.binding_energy_calculation(system,context,None)
    state=context.getState(getEnergy=True)
    U1=state.getPotentialEnergy()
    print(state.getPotentialEnergy())
    testDes.set_orig_force_parameters(system,context)
    testDes.binding_energy_calculation(system,context,True)
    state=context.getState(getEnergy=True)
    U0=state.getPotentialEnergy()
    print(state.getPotentialEnergy())
    print("initial binding energy="+str(U1-U0))
    #ended
    """
    
    state = simulation.context.getState(getEnergy = True,getForces=True)
    print "Using platform %s" % simulation.context.getPlatform().getName()
    print(state.getPotentialEnergy())
    #print(state.getForces(asNumpy = True))
    simulation.minimizeEnergy()
    stepId = 1000
    #totalStep = 20000
    loopStep = 2500
    #simulation.reporters.append(StateDataReporter(stdout, stepId, step=True, potentialEnergy=True))
    #simulation.reporters.append(DCDReporter('bcd_benzene.dcd', stepId))
    #simulation.step(totalStep)

    print "binding energy calculation starting"
    #binding_file = 'binding_abc_80_nonrestraint.txt'
    #f = open(binding_file, 'w')

    for i in range(loopStep):
        simulation.step(stepId)
        if simulation.currentStep%stepId==0:
            print "calculating binding energy"
            testDes.binding_energy_calculation(system,context,None)
            state=context.getState(getEnergy=True)
            U1=state.getPotentialEnergy()
            print(state.getPotentialEnergy())
            testDes.set_orig_force_parameters(system,context)
            testDes.binding_energy_calculation(system,context,True)
            state=context.getState(getEnergy=True)
            U0=state.getPotentialEnergy()
            print(state.getPotentialEnergy())
	    print("binding energy="+str(U1-U0))
	    if i>0:	
	        f.write("%f %f %f %f\n" % (0.0, 300.0,lambdaId, U1._value - U0._value))	
	    testDes.set_orig_force_parameters(system,context)
            #if i%10==0:
            #    j = i/10
            #    positions = simulation.context.getState(getPositions=True).getPositions()
            #    velocities = simulation.context.getState(getVelocities=True).getVelocities()
            #    print "Updating positions and velocities"
            #    testDes.setPositions(positions)
            #    testDes.setVelocities(velocities)
            #    #testDes.close()
            #    cp_rcpt_command = "cp bcd_recpt.dms bcd_recpt_%d.dms" % j
            #    cp_lig_command = "cp benzene_lig.dms benzene_lig_%d.dms" % j
            #    os.system(cp_lig_command)
            #    os.system(cp_rcpt_command)
                            
f.close()

#print binding_energy #>binding_energy.LOG
#testDes.binding_energy_calculation(system,context2,None)
#state2=context2.getState(getEnergy=True)
#print(state2.getPotentialEnergy())
#simulation.context=context
#context1.reinitialize()
#testDes = DesmondDMSFile('bcd_recpt1.dms','benzene_lig1.dms',BEDAM=True)
#system = testDes.createSystem(nonbondedMethod=CutoffNonPeriodic,nonbondedCutoff=1.0*nanometer, OPLS = True, implicitSolvent=HCT)
#integrator = LangevinIntegratorBEDAM(300*kelvin, 1/picosecond, 0.002*picoseconds,12,80)
#platform = Platform.getPlatformByName('Reference')
#context1=simulation.context
#context.setParameter('sigma',0.0)
#state1=context1.getState(getEnergy = True)
#print(state1.getPotentialEnergy())
#state = context1.getState(getEnergy = True)
#print(state.getPotentialEnergy())
#context1.setPositions(testDes.positions)
#context1.setVelocities(testDes.velocities)
#simulation.step(100)

#state = simulation.context.getState(getEnergy = True,getParameters=True)
#print(state.getPotentialEnergy())
#print(context.getParameter('epsilon'))
#positions = simulation.context.getState(getPositions=True).getPositions()
#velocities = simulation.context.getState(getVelocities=True).getVelocities()
#print "Updating positions and velocities"
#testDes.setPositions(positions)
#testDes.setVelocities(velocities)
#testDes.close()

end=datetime.now()
elapsed=end - start
print("elapsed time="+str(elapsed.seconds+elapsed.microseconds*1e-6)+"s")
